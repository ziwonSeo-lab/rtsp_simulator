# RTSP 시뮬레이터 프로젝트 규칙

## 프로젝트 개요
고성능 멀티스레드 RTSP 스트림 및 비디오 파일 처리 시뮬레이터
- 실시간 영상 블러링 및 객체 탐지
- FFmpeg 기반 고급 비디오 인코딩
- 실시간 성능 모니터링 및 GUI

## 코드 구조 규칙

### 디렉토리 구조
```
rtsp_simulator/
├── code/
│   ├── rtsp_gui/           # GUI 메인 애플리케이션
│   ├── rtsp_save_process/  # 영상 저장 프로세스
│   └── media_process/      # 미디어 처리 유틸리티
├── blur_module/            # 블러 모듈 (YOLO/HeadBlurrer)
├── output/                 # 처리된 영상 출력
├── media/                  # 테스트 미디어 파일
└── requirements.txt        # 의존성 패키지
```

### 파일 명명 규칙
- 메인 GUI 파일: `rtsp_simulator_ffmpeg_v*.py`
- 프로세스 모듈: `*_process.py`, `*_processor.py`
- 설정 파일: `*_config.json`
- 블러 모듈: `blur_module.py`, `head_blurrer.py`

## 개발 가이드라인

### 1. 코딩 스타일
- **언어**: Python 3.7+
- **인코딩**: UTF-8
- **주석**: 한국어 주석 허용 (기능 설명)
- **DocString**: 영어 또는 한국어
- **로깅**: `logging` 모듈 사용, INFO 레벨 이상

### 2. 아키텍처 원칙
- **멀티스레딩**: `threading` 모듈 기반 병렬 처리
- **스레드 안전성**: 스레드별 독립적인 리소스 관리
- **큐 기반 통신**: `queue.Queue`로 스레드 간 데이터 전달
- **모듈화**: 기능별 클래스 분리 (Config, Processor, GUI)

### 3. 성능 최적화
- **고성능 모드**: 통계/로깅 최소화 옵션
- **메모리 관리**: 프레임 복사 최소화
- **GPU 활용**: 하드웨어 가속 지원
- **프로파일링**: 성능 병목 지점 모니터링

#### 3.1 성능 최적화 베스트 프랙티스 (실제 적용 사례)
- **시작시간 계산 개선**: 프로세서 시작 시간 → 첫 프레임 입력 시간 기준으로 FPS 계산
  - 초기화 지연시간을 성능 측정에서 제외하여 정확한 FPS 산출
- **프레임 처리 병목 해결**: 가장 시간이 오래 걸리는 프레임 처리 파이프라인 최적화
  - 블러 처리 알고리즘 최적화 (커널 크기 조정, 처리 영역 최소화)
  - 오버레이 렌더링 최적화 (불필요한 cv2.rectangle, cv2.putText 호출 최소화)
  - 프레임 복사 작업 최소화 (고성능 모드에서 in-place 처리)
- **실제 성과**: 6대 카메라 × 15 FPS = 90 FPS 목표 달성

### 4. GUI 설계 원칙
- **Tkinter 기반**: 크로스 플랫폼 호환성
- **스크롤 지원**: 설정이 많은 경우 스크롤 가능
- **실시간 업데이트**: 100ms 간격 상태 갱신
- **사용자 친화적**: 직관적인 설정 패널

## 기술 스택 규칙

### 필수 의존성
- **OpenCV**: 영상 처리 및 코덱 지원
- **Tkinter**: GUI 프레임워크
- **PIL/Pillow**: 이미지 처리
- **NumPy**: 수치 연산
- **PSUtil**: 시스템 리소스 모니터링

### 선택적 의존성
- **FFmpeg**: 고급 비디오 인코딩 (외부 설치)
- **GPUtil**: GPU 모니터링
- **YOLO/PyTorch**: AI 모델 (블러 모듈)
- **python-dotenv**: 환경변수 관리

### 환경 설정
- **.env 파일**: 기본 설정값 정의
- **config 파라미터**: 런타임 설정 우선
- **환경변수**: `DEFAULT_*` 접두사 사용

## 테스트 및 품질 관리

### 테스트 전략
- **단위 테스트**: 각 클래스/메서드별 테스트
- **통합 테스트**: RTSP 연결 및 파일 처리 테스트
- **성능 테스트**: FPS 목표 달성 검증
- **메모리 테스트**: 장시간 실행 안정성 검증

### 품질 기준
- **FPS 성능**: 설정 FPS의 90% 이상 달성
- **메모리 안정성**: 장시간 실행 시 메모리 누수 없음
- **에러 처리**: 네트워크 오류, 파일 오류 적절히 처리
- **사용성**: GUI 응답성 유지

## 버전 관리

### 브랜치 전략
- **main**: 안정 버전
- **develop**: 개발 중인 기능
- **feature/***: 새로운 기능 개발
- **hotfix/***: 긴급 버그 수정

### 커밋 메시지 규칙
```
[타입] 간단한 요약 (50자 이내)

상세 설명 (필요시)
- 변경 사항 1
- 변경 사항 2

관련 이슈: #123
```

타입: feat, fix, docs, style, refactor, test, chore

## 배포 및 운영

### 패키징
- **requirements.txt**: 정확한 버전 명시
- **README.md**: 설치 및 사용법 상세 기술
- **예제 파일**: 설정 예제 및 테스트 미디어

### 운영 환경
- **로그 파일**: 날짜별 로그 로테이션
- **설정 백업**: 중요 설정 파일 백업
- **모니터링**: 시스템 리소스 및 성능 지표 추적

## 보안 및 데이터 관리

### 데이터 보안
- **RTSP 인증정보**: 환경변수 또는 설정 파일로 관리
- **출력 파일**: 적절한 권한 설정
- **로그 민감정보**: 개인정보 로깅 금지

### 개인정보 보호
- **GPS 좌표**: 설정 가능한 더미 데이터
- **시간 정보**: UTC 또는 로컬 시간 선택
- **영상 데이터**: 사용자 동의 하에 처리 